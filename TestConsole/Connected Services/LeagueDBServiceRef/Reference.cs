//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsole.LeagueDBServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LeagueDBServiceRef.ILeagueDBService")]
    public interface ILeagueDBService {
        
        // CODEGEN: Generating message contract since the wrapper name (RequestMessage) of message RequestMessage does not match the default value (MessageTest)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/MessageTest", ReplyAction="http://tempuri.org/ILeagueDBService/MessageTestResponse")]
        TestConsole.LeagueDBServiceRef.ResponseMessage MessageTest(TestConsole.LeagueDBServiceRef.RequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/MessageTest", ReplyAction="http://tempuri.org/ILeagueDBService/MessageTestResponse")]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.ResponseMessage> MessageTestAsync(TestConsole.LeagueDBServiceRef.RequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabasePOST", ReplyAction="http://tempuri.org/ILeagueDBService/DatabasePOSTResponse")]
        TestConsole.LeagueDBServiceRef.POSTItemsResponseMessage DatabasePOST(TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabasePOST", ReplyAction="http://tempuri.org/ILeagueDBService/DatabasePOSTResponse")]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.POSTItemsResponseMessage> DatabasePOSTAsync(TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage request);
        
        // CODEGEN: Generating message contract since the wrapper name (GETItemsRequestMessage) of message GETItemsRequestMessage does not match the default value (DatabaseGET)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabaseGET", ReplyAction="http://tempuri.org/ILeagueDBService/DatabaseGETResponse")]
        TestConsole.LeagueDBServiceRef.GETItemsResponseMessage DatabaseGET(TestConsole.LeagueDBServiceRef.GETItemsRequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabaseGET", ReplyAction="http://tempuri.org/ILeagueDBService/DatabaseGETResponse")]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.GETItemsResponseMessage> DatabaseGETAsync(TestConsole.LeagueDBServiceRef.GETItemsRequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabasePUT", ReplyAction="http://tempuri.org/ILeagueDBService/DatabasePUTResponse")]
        TestConsole.LeagueDBServiceRef.PUTItemsResponseMessage DatabasePUT(TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabasePUT", ReplyAction="http://tempuri.org/ILeagueDBService/DatabasePUTResponse")]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.PUTItemsResponseMessage> DatabasePUTAsync(TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage request);
        
        // CODEGEN: Generating message contract since the wrapper name (DELItemsRequestMessage) of message DELItemsRequestMessage does not match the default value (DatabaseDEL)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabaseDEL", ReplyAction="http://tempuri.org/ILeagueDBService/DatabaseDELResponse")]
        TestConsole.LeagueDBServiceRef.DELItemsResponseMessage DatabaseDEL(TestConsole.LeagueDBServiceRef.DELItemsRequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/DatabaseDEL", ReplyAction="http://tempuri.org/ILeagueDBService/DatabaseDELResponse")]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.DELItemsResponseMessage> DatabaseDELAsync(TestConsole.LeagueDBServiceRef.DELItemsRequestMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/SetDatabaseName", ReplyAction="http://tempuri.org/ILeagueDBService/SetDatabaseNameResponse")]
        void SetDatabaseName(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/SetDatabaseName", ReplyAction="http://tempuri.org/ILeagueDBService/SetDatabaseNameResponse")]
        System.Threading.Tasks.Task SetDatabaseNameAsync(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/TestDB", ReplyAction="http://tempuri.org/ILeagueDBService/TestDBResponse")]
        string TestDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/TestDB", ReplyAction="http://tempuri.org/ILeagueDBService/TestDBResponse")]
        System.Threading.Tasks.Task<string> TestDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/Test", ReplyAction="http://tempuri.org/ILeagueDBService/TestResponse")]
        string Test(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/Test", ReplyAction="http://tempuri.org/ILeagueDBService/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/CalculateScoredResults", ReplyAction="http://tempuri.org/ILeagueDBService/CalculateScoredResultsResponse")]
        void CalculateScoredResults(long sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/CalculateScoredResults", ReplyAction="http://tempuri.org/ILeagueDBService/CalculateScoredResultsResponse")]
        System.Threading.Tasks.Task CalculateScoredResultsAsync(long sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/CleanUpSessions", ReplyAction="http://tempuri.org/ILeagueDBService/CleanUpSessionsResponse")]
        void CleanUpSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeagueDBService/CleanUpSessions", ReplyAction="http://tempuri.org/ILeagueDBService/CleanUpSessionsResponse")]
        System.Threading.Tasks.Task CleanUpSessionsAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string requestItemType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool requestResponse;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userName;
        
        public RequestMessage() {
        }
        
        public RequestMessage(string databaseName, string password, string requestItemType, bool requestResponse, string userName) {
            this.databaseName = databaseName;
            this.password = password;
            this.requestItemType = requestItemType;
            this.requestResponse = requestResponse;
            this.userName = userName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResponseMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Username;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string status;
        
        public ResponseMessage() {
        }
        
        public ResponseMessage(string Username, string databaseName, string status) {
            this.Username = Username;
            this.databaseName = databaseName;
            this.status = status;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="POSTItemsRequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class POSTItemsRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string requestItemType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool requestResponse;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public iRLeagueDatabase.DataTransfer.MappableDTO[] items;
        
        public POSTItemsRequestMessage() {
        }
        
        public POSTItemsRequestMessage(string databaseName, string password, string requestItemType, bool requestResponse, string userName, iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            this.databaseName = databaseName;
            this.password = password;
            this.requestItemType = requestItemType;
            this.requestResponse = requestResponse;
            this.userName = userName;
            this.items = items;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="POSTItemsResponseMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class POSTItemsResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Username;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public iRLeagueDatabase.DataTransfer.MappableDTO[] items;
        
        public POSTItemsResponseMessage() {
        }
        
        public POSTItemsResponseMessage(string Username, string databaseName, string status, iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            this.Username = Username;
            this.databaseName = databaseName;
            this.status = status;
            this.items = items;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GETItemsRequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GETItemsRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string requestItemType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool requestResponse;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long[][] requestItemIds;
        
        public GETItemsRequestMessage() {
        }
        
        public GETItemsRequestMessage(string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds) {
            this.databaseName = databaseName;
            this.password = password;
            this.requestItemType = requestItemType;
            this.requestResponse = requestResponse;
            this.userName = userName;
            this.requestItemIds = requestItemIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GETItemsResponseMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GETItemsResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Username;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public iRLeagueDatabase.DataTransfer.MappableDTO[] items;
        
        public GETItemsResponseMessage() {
        }
        
        public GETItemsResponseMessage(string Username, string databaseName, string status, iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            this.Username = Username;
            this.databaseName = databaseName;
            this.status = status;
            this.items = items;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PUTItemsRequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PUTItemsRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string requestItemType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool requestResponse;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public iRLeagueDatabase.DataTransfer.MappableDTO[] items;
        
        public PUTItemsRequestMessage() {
        }
        
        public PUTItemsRequestMessage(string databaseName, string password, string requestItemType, bool requestResponse, string userName, iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            this.databaseName = databaseName;
            this.password = password;
            this.requestItemType = requestItemType;
            this.requestResponse = requestResponse;
            this.userName = userName;
            this.items = items;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PUTItemsResponseMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class PUTItemsResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Username;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public iRLeagueDatabase.DataTransfer.MappableDTO[] items;
        
        public PUTItemsResponseMessage() {
        }
        
        public PUTItemsResponseMessage(string Username, string databaseName, string status, iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            this.Username = Username;
            this.databaseName = databaseName;
            this.status = status;
            this.items = items;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DELItemsRequestMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DELItemsRequestMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string requestItemType;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool requestResponse;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public long[][] requestItemIds;
        
        public DELItemsRequestMessage() {
        }
        
        public DELItemsRequestMessage(string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds) {
            this.databaseName = databaseName;
            this.password = password;
            this.requestItemType = requestItemType;
            this.requestResponse = requestResponse;
            this.userName = userName;
            this.requestItemIds = requestItemIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DELItemsResponseMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DELItemsResponseMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Username;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string databaseName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool success;
        
        public DELItemsResponseMessage() {
        }
        
        public DELItemsResponseMessage(string Username, string databaseName, string status, bool success) {
            this.Username = Username;
            this.databaseName = databaseName;
            this.status = status;
            this.success = success;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILeagueDBServiceChannel : TestConsole.LeagueDBServiceRef.ILeagueDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LeagueDBServiceClient : System.ServiceModel.ClientBase<TestConsole.LeagueDBServiceRef.ILeagueDBService>, TestConsole.LeagueDBServiceRef.ILeagueDBService {
        
        public LeagueDBServiceClient() {
        }
        
        public LeagueDBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LeagueDBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeagueDBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeagueDBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.LeagueDBServiceRef.ResponseMessage TestConsole.LeagueDBServiceRef.ILeagueDBService.MessageTest(TestConsole.LeagueDBServiceRef.RequestMessage request) {
            return base.Channel.MessageTest(request);
        }
        
        public string MessageTest(ref string databaseName, string password, string requestItemType, bool requestResponse, string userName, out string status) {
            TestConsole.LeagueDBServiceRef.RequestMessage inValue = new TestConsole.LeagueDBServiceRef.RequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            TestConsole.LeagueDBServiceRef.ResponseMessage retVal = ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).MessageTest(inValue);
            databaseName = retVal.databaseName;
            status = retVal.status;
            return retVal.Username;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.ResponseMessage> TestConsole.LeagueDBServiceRef.ILeagueDBService.MessageTestAsync(TestConsole.LeagueDBServiceRef.RequestMessage request) {
            return base.Channel.MessageTestAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.ResponseMessage> MessageTestAsync(string databaseName, string password, string requestItemType, bool requestResponse, string userName) {
            TestConsole.LeagueDBServiceRef.RequestMessage inValue = new TestConsole.LeagueDBServiceRef.RequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            return ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).MessageTestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.LeagueDBServiceRef.POSTItemsResponseMessage TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabasePOST(TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage request) {
            return base.Channel.DatabasePOST(request);
        }
        
        public string DatabasePOST(ref string databaseName, string password, string requestItemType, bool requestResponse, string userName, ref iRLeagueDatabase.DataTransfer.MappableDTO[] items, out string status) {
            TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.items = items;
            TestConsole.LeagueDBServiceRef.POSTItemsResponseMessage retVal = ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabasePOST(inValue);
            databaseName = retVal.databaseName;
            status = retVal.status;
            items = retVal.items;
            return retVal.Username;
        }
        
        public System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.POSTItemsResponseMessage> DatabasePOSTAsync(TestConsole.LeagueDBServiceRef.POSTItemsRequestMessage request) {
            return base.Channel.DatabasePOSTAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.LeagueDBServiceRef.GETItemsResponseMessage TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabaseGET(TestConsole.LeagueDBServiceRef.GETItemsRequestMessage request) {
            return base.Channel.DatabaseGET(request);
        }
        
        public string DatabaseGET(ref string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds, out string status, out iRLeagueDatabase.DataTransfer.MappableDTO[] items) {
            TestConsole.LeagueDBServiceRef.GETItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.GETItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.requestItemIds = requestItemIds;
            TestConsole.LeagueDBServiceRef.GETItemsResponseMessage retVal = ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabaseGET(inValue);
            databaseName = retVal.databaseName;
            status = retVal.status;
            items = retVal.items;
            return retVal.Username;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.GETItemsResponseMessage> TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabaseGETAsync(TestConsole.LeagueDBServiceRef.GETItemsRequestMessage request) {
            return base.Channel.DatabaseGETAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.GETItemsResponseMessage> DatabaseGETAsync(string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds) {
            TestConsole.LeagueDBServiceRef.GETItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.GETItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.requestItemIds = requestItemIds;
            return ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabaseGETAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.LeagueDBServiceRef.PUTItemsResponseMessage TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabasePUT(TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage request) {
            return base.Channel.DatabasePUT(request);
        }
        
        public string DatabasePUT(ref string databaseName, string password, string requestItemType, bool requestResponse, string userName, ref iRLeagueDatabase.DataTransfer.MappableDTO[] items, out string status) {
            TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.items = items;
            TestConsole.LeagueDBServiceRef.PUTItemsResponseMessage retVal = ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabasePUT(inValue);
            databaseName = retVal.databaseName;
            status = retVal.status;
            items = retVal.items;
            return retVal.Username;
        }
        
        public System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.PUTItemsResponseMessage> DatabasePUTAsync(TestConsole.LeagueDBServiceRef.PUTItemsRequestMessage request) {
            return base.Channel.DatabasePUTAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestConsole.LeagueDBServiceRef.DELItemsResponseMessage TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabaseDEL(TestConsole.LeagueDBServiceRef.DELItemsRequestMessage request) {
            return base.Channel.DatabaseDEL(request);
        }
        
        public string DatabaseDEL(ref string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds, out string status, out bool success) {
            TestConsole.LeagueDBServiceRef.DELItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.DELItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.requestItemIds = requestItemIds;
            TestConsole.LeagueDBServiceRef.DELItemsResponseMessage retVal = ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabaseDEL(inValue);
            databaseName = retVal.databaseName;
            status = retVal.status;
            success = retVal.success;
            return retVal.Username;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.DELItemsResponseMessage> TestConsole.LeagueDBServiceRef.ILeagueDBService.DatabaseDELAsync(TestConsole.LeagueDBServiceRef.DELItemsRequestMessage request) {
            return base.Channel.DatabaseDELAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestConsole.LeagueDBServiceRef.DELItemsResponseMessage> DatabaseDELAsync(string databaseName, string password, string requestItemType, bool requestResponse, string userName, long[][] requestItemIds) {
            TestConsole.LeagueDBServiceRef.DELItemsRequestMessage inValue = new TestConsole.LeagueDBServiceRef.DELItemsRequestMessage();
            inValue.databaseName = databaseName;
            inValue.password = password;
            inValue.requestItemType = requestItemType;
            inValue.requestResponse = requestResponse;
            inValue.userName = userName;
            inValue.requestItemIds = requestItemIds;
            return ((TestConsole.LeagueDBServiceRef.ILeagueDBService)(this)).DatabaseDELAsync(inValue);
        }
        
        public void SetDatabaseName(string databaseName) {
            base.Channel.SetDatabaseName(databaseName);
        }
        
        public System.Threading.Tasks.Task SetDatabaseNameAsync(string databaseName) {
            return base.Channel.SetDatabaseNameAsync(databaseName);
        }
        
        public string TestDB() {
            return base.Channel.TestDB();
        }
        
        public System.Threading.Tasks.Task<string> TestDBAsync() {
            return base.Channel.TestDBAsync();
        }
        
        public string Test(string name) {
            return base.Channel.Test(name);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(string name) {
            return base.Channel.TestAsync(name);
        }
        
        public void CalculateScoredResults(long sessionId) {
            base.Channel.CalculateScoredResults(sessionId);
        }
        
        public System.Threading.Tasks.Task CalculateScoredResultsAsync(long sessionId) {
            return base.Channel.CalculateScoredResultsAsync(sessionId);
        }
        
        public void CleanUpSessions() {
            base.Channel.CleanUpSessions();
        }
        
        public System.Threading.Tasks.Task CleanUpSessionsAsync() {
            return base.Channel.CleanUpSessionsAsync();
        }
    }
}
